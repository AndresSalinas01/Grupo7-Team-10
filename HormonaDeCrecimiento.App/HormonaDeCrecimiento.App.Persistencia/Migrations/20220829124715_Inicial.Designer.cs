// <auto-generated />
using System;
using HormonaDeCrecimiento.App.Persistencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HormonaDeCrecimiento.App.Persistencia.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20220829124715_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HormonaDeCrecimiento.App.Dominio.Historia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Historias");
                });

            modelBuilder.Entity("HormonaDeCrecimiento.App.Dominio.Patron", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("TipoPatron")
                        .HasColumnType("int");

                    b.Property<float>("Valor")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Patrones");
                });

            modelBuilder.Entity("HormonaDeCrecimiento.App.Dominio.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Genero")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Personas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Persona");
                });

            modelBuilder.Entity("HormonaDeCrecimiento.App.Dominio.SugerenciaCuidado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HistoriaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoriaId");

                    b.ToTable("SugerenciaCuidados");
                });

            modelBuilder.Entity("HormonaDeCrecimiento.App.Dominio.Familiar", b =>
                {
                    b.HasBaseType("HormonaDeCrecimiento.App.Dominio.Persona");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parentesco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Familiar");
                });

            modelBuilder.Entity("HormonaDeCrecimiento.App.Dominio.Medico", b =>
                {
                    b.HasBaseType("HormonaDeCrecimiento.App.Dominio.Persona");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistroRethus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Medico");
                });

            modelBuilder.Entity("HormonaDeCrecimiento.App.Dominio.Paciente", b =>
                {
                    b.HasBaseType("HormonaDeCrecimiento.App.Dominio.Persona");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndocrinoId")
                        .HasColumnType("int");

                    b.Property<int>("FamiliarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechadeNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("HistoriaId")
                        .HasColumnType("int");

                    b.Property<float>("Latitud")
                        .HasColumnType("real");

                    b.Property<float>("Longitud")
                        .HasColumnType("real");

                    b.Property<int>("PatronId")
                        .HasColumnType("int");

                    b.Property<int>("PediatraId")
                        .HasColumnType("int");

                    b.HasIndex("EndocrinoId");

                    b.HasIndex("FamiliarId");

                    b.HasIndex("HistoriaId");

                    b.HasIndex("PatronId");

                    b.HasIndex("PediatraId");

                    b.HasDiscriminator().HasValue("Paciente");
                });

            modelBuilder.Entity("HormonaDeCrecimiento.App.Dominio.Patron", b =>
                {
                    b.HasOne("HormonaDeCrecimiento.App.Dominio.Paciente", null)
                        .WithMany("Patrones")
                        .HasForeignKey("PacienteId");
                });

            modelBuilder.Entity("HormonaDeCrecimiento.App.Dominio.SugerenciaCuidado", b =>
                {
                    b.HasOne("HormonaDeCrecimiento.App.Dominio.Historia", null)
                        .WithMany("Sugerencias")
                        .HasForeignKey("HistoriaId");
                });

            modelBuilder.Entity("HormonaDeCrecimiento.App.Dominio.Paciente", b =>
                {
                    b.HasOne("HormonaDeCrecimiento.App.Dominio.Medico", "Endocrino")
                        .WithMany()
                        .HasForeignKey("EndocrinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HormonaDeCrecimiento.App.Dominio.Familiar", "Familiar")
                        .WithMany()
                        .HasForeignKey("FamiliarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HormonaDeCrecimiento.App.Dominio.Historia", "Historia")
                        .WithMany()
                        .HasForeignKey("HistoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HormonaDeCrecimiento.App.Dominio.Patron", "Patron")
                        .WithMany()
                        .HasForeignKey("PatronId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HormonaDeCrecimiento.App.Dominio.Medico", "Pediatra")
                        .WithMany()
                        .HasForeignKey("PediatraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endocrino");

                    b.Navigation("Familiar");

                    b.Navigation("Historia");

                    b.Navigation("Patron");

                    b.Navigation("Pediatra");
                });

            modelBuilder.Entity("HormonaDeCrecimiento.App.Dominio.Historia", b =>
                {
                    b.Navigation("Sugerencias");
                });

            modelBuilder.Entity("HormonaDeCrecimiento.App.Dominio.Paciente", b =>
                {
                    b.Navigation("Patrones");
                });
#pragma warning restore 612, 618
        }
    }
}
